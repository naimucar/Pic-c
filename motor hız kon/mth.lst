CCS PCM C Compiler, Version 4.038, 62930               26-May-08 19:09

               Filename: C:\work\motor hýz kon\mth.lst

               ROM used: 659 words (8%)
                         Largest free fragment is 2048
               RAM used: 15 (4%) at main() level
                         32 (9%) worst case
               Stack:    5 locations

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   1B9
0003:  NOP
.................... #include<16f877a.h>    
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #DEViCE ADC=8               // mikrodenetleyici dosyasýný yükle                
.................... #fuses xt,nowdt,noprotect                       // sigortalarý ayarla 
.................... #use delay(clock=4000000)              // 4 Mhz kristal için gecikmeleri ayarla 
*
005C:  MOVLW  33
005D:  MOVWF  04
005E:  BCF    03.7
005F:  MOVF   00,W
0060:  BTFSC  03.2
0061:  GOTO   070
0062:  MOVLW  01
0063:  MOVWF  78
0064:  CLRF   77
0065:  DECFSZ 77,F
0066:  GOTO   065
0067:  DECFSZ 78,F
0068:  GOTO   064
0069:  MOVLW  4A
006A:  MOVWF  77
006B:  DECFSZ 77,F
006C:  GOTO   06B
006D:  GOTO   06E
006E:  DECFSZ 00,F
006F:  GOTO   062
0070:  RETLW  00
.................... #include<ekran.h>                       // lcd yi portb ye baðlamak için gerekli dosyalarý yükle 
.................... //////////////////////////////////////////////////////////////// 
.................... // 4x20 lcd lerin 4 Mhz üstünde (max 16MHz) de çalýþmasý için // 
.................... // bu rutini kullanýn										  // 
.................... //////////////////////////////////////////////////////////////// 
.................... #define LCD_DB4   PIN_B4  
.................... #define LCD_DB5   PIN_B5  
.................... #define LCD_DB6   PIN_B6  
.................... #define LCD_DB7   PIN_B7  
....................  
.................... #define LCD_E     PIN_B3  
.................... #define LCD_RS    PIN_B2  
....................        
....................  
.................... //========================================  
....................  
.................... #define lcd_type 2        // 0=5x7, 1=5x10, 2=2 lines  
.................... #define lcd_line_two 0x40 // LCD RAM address for the 2nd line  
.................... byte lcdline; 
....................  
.................... int8 const LCD_INIT_STRING[4] =  
.................... {  
....................  0x20 | (lcd_type << 2), // Func set: 4-bit, 2 lines, 5x8 dots  
....................  0xc,                    // Display on  
....................  1,                      // Clear display  
....................  6                       // Increment cursor  
....................  };  
....................                                
....................  
.................... //-------------------------------------  
.................... void lcd_send_nibble(int8 nibble)  
.................... {  
.................... // Note:  !! converts an integer expression  
.................... // to a boolean (1 or 0).  
....................  output_bit(LCD_DB4, !!(nibble & 1));  
0071:  BTFSC  39.0
0072:  GOTO   075
0073:  BCF    06.4
0074:  GOTO   076
0075:  BSF    06.4
0076:  BSF    03.5
0077:  BCF    06.4
....................  output_bit(LCD_DB5, !!(nibble & 2));   
0078:  BCF    03.5
0079:  BTFSC  39.1
007A:  GOTO   07D
007B:  BCF    06.5
007C:  GOTO   07E
007D:  BSF    06.5
007E:  BSF    03.5
007F:  BCF    06.5
....................  output_bit(LCD_DB6, !!(nibble & 4));     
0080:  BCF    03.5
0081:  BTFSC  39.2
0082:  GOTO   085
0083:  BCF    06.6
0084:  GOTO   086
0085:  BSF    06.6
0086:  BSF    03.5
0087:  BCF    06.6
....................  output_bit(LCD_DB7, !!(nibble & 8));     
0088:  BCF    03.5
0089:  BTFSC  39.3
008A:  GOTO   08D
008B:  BCF    06.7
008C:  GOTO   08E
008D:  BSF    06.7
008E:  BSF    03.5
008F:  BCF    06.7
....................  
....................  delay_cycles(10);  
0090:  MOVLW  03
0091:  MOVWF  77
0092:  DECFSZ 77,F
0093:  GOTO   092
....................  output_high(LCD_E);  
0094:  BCF    06.3
0095:  BCF    03.5
0096:  BSF    06.3
....................  delay_us(20);  
0097:  MOVLW  06
0098:  MOVWF  77
0099:  DECFSZ 77,F
009A:  GOTO   099
009B:  NOP
....................  output_low(LCD_E);  
009C:  BSF    03.5
009D:  BCF    06.3
009E:  BCF    03.5
009F:  BCF    06.3
.................... }  
00A0:  RETLW  00
....................   
.................... // Send a byte to the LCD.  
.................... void lcd_send_byte(int8 address, int8 n)  
.................... {  
.................... output_low(LCD_RS);  
00A1:  BSF    03.5
00A2:  BCF    06.2
00A3:  BCF    03.5
00A4:  BCF    06.2
....................  
....................  
.................... if(address)  
00A5:  MOVF   36,F
00A6:  BTFSC  03.2
00A7:  GOTO   0AD
....................    output_high(LCD_RS);  
00A8:  BSF    03.5
00A9:  BCF    06.2
00AA:  BCF    03.5
00AB:  BSF    06.2
.................... else  
00AC:  GOTO   0B1
....................    output_low(LCD_RS);  
00AD:  BSF    03.5
00AE:  BCF    06.2
00AF:  BCF    03.5
00B0:  BCF    06.2
....................        
....................  delay_cycles(10);  
00B1:  MOVLW  03
00B2:  MOVWF  77
00B3:  DECFSZ 77,F
00B4:  GOTO   0B3
....................  
....................  
.................... output_low(LCD_E);  
00B5:  BSF    03.5
00B6:  BCF    06.3
00B7:  BCF    03.5
00B8:  BCF    06.3
....................  
.................... lcd_send_nibble(n >> 4);  
00B9:  SWAPF  37,W
00BA:  MOVWF  38
00BB:  MOVLW  0F
00BC:  ANDWF  38,F
00BD:  MOVF   38,W
00BE:  MOVWF  39
00BF:  CALL   071
.................... lcd_send_nibble(n & 0xf);  
00C0:  MOVF   37,W
00C1:  ANDLW  0F
00C2:  MOVWF  38
00C3:  MOVWF  39
00C4:  CALL   071
.................... }  
00C5:  RETLW  00
....................  
.................... //----------------------------  
.................... void lcd_init(void)  
.................... {  
.................... int8 i;  
....................  
.................... output_low(LCD_RS);  
00C6:  BSF    03.5
00C7:  BCF    06.2
00C8:  BCF    03.5
00C9:  BCF    06.2
.................... output_low(LCD_E);  
00CA:  BSF    03.5
00CB:  BCF    06.3
00CC:  BCF    03.5
00CD:  BCF    06.3
.................... delay_ms(20);  
00CE:  MOVLW  14
00CF:  MOVWF  33
00D0:  CALL   05C
.................... for(i=0 ;i < 3; i++)  
00D1:  CLRF   28
00D2:  MOVF   28,W
00D3:  SUBLW  02
00D4:  BTFSS  03.0
00D5:  GOTO   0DE
....................    {  
....................     lcd_send_nibble(0x03);  
00D6:  MOVLW  03
00D7:  MOVWF  39
00D8:  CALL   071
....................     delay_ms(15);  
00D9:  MOVLW  0F
00DA:  MOVWF  33
00DB:  CALL   05C
....................    }  
00DC:  INCF   28,F
00DD:  GOTO   0D2
....................  
.................... lcd_send_nibble(0x02);  
00DE:  MOVLW  02
00DF:  MOVWF  39
00E0:  CALL   071
....................  
.................... for(i=0; i < sizeof(LCD_INIT_STRING); i++)  
00E1:  CLRF   28
00E2:  MOVF   28,W
00E3:  SUBLW  03
00E4:  BTFSS  03.0
00E5:  GOTO   0EF
....................    {  
....................     lcd_send_byte(0, LCD_INIT_STRING[i]);  
00E6:  MOVF   28,W
00E7:  CALL   004
00E8:  MOVWF  29
00E9:  CLRF   36
00EA:  MOVF   29,W
00EB:  MOVWF  37
00EC:  CALL   0A1
....................      
....................    }  
00ED:  INCF   28,F
00EE:  GOTO   0E2
....................  
.................... }  
00EF:  BCF    0A.3
00F0:  BCF    0A.4
00F1:  GOTO   1F5 (RETURN)
....................  
.................... //----------------------------  
....................  
.................... void lcd_gotoxy( BYTE y, BYTE x) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
00F2:  MOVLW  01
00F3:  SUBWF  33,W
00F4:  ADDLW  FC
00F5:  BTFSC  03.0
00F6:  GOTO   105
00F7:  ADDLW  04
00F8:  GOTO   10D
....................      case 1 : address=0x80;break; 
00F9:  MOVLW  80
00FA:  MOVWF  35
00FB:  GOTO   105
....................      case 2 : address=0xc0;break; 
00FC:  MOVLW  C0
00FD:  MOVWF  35
00FE:  GOTO   105
....................      case 3 : address=0x94;break; 
00FF:  MOVLW  94
0100:  MOVWF  35
0101:  GOTO   105
....................      case 4 : address=0xd4;break; 
0102:  MOVLW  D4
0103:  MOVWF  35
0104:  GOTO   105
....................    } 
....................    address+=x-1; 
0105:  MOVLW  01
0106:  SUBWF  34,W
0107:  ADDWF  35,F
....................    lcd_send_byte(0,address); 
0108:  CLRF   36
0109:  MOVF   35,W
010A:  MOVWF  37
010B:  CALL   0A1
.................... }  
010C:  RETLW  00
....................  
.................... //-----------------------------  
....................  
....................  
.................... void lcd_putc( char c) { 
....................    switch (c) { 
*
0115:  MOVF   32,W
0116:  XORLW  0C
0117:  BTFSC  03.2
0118:  GOTO   120
0119:  XORLW  06
011A:  BTFSC  03.2
011B:  GOTO   12A
011C:  XORLW  02
011D:  BTFSC  03.2
011E:  GOTO   131
011F:  GOTO   136
....................      case '\f'   : lcd_send_byte(0,1); 
0120:  CLRF   36
0121:  MOVLW  01
0122:  MOVWF  37
0123:  CALL   0A1
....................                    lcdline=1; 
0124:  MOVLW  01
0125:  MOVWF  20
....................                    delay_ms(10); 
0126:  MOVLW  0A
0127:  MOVWF  33
0128:  CALL   05C
....................                                            break; 
0129:  GOTO   13C
....................      case '\n'   : lcd_gotoxy(1,++lcdline); break; 
012A:  INCF   20,F
012B:  MOVLW  01
012C:  MOVWF  33
012D:  MOVF   20,W
012E:  MOVWF  34
012F:  CALL   0F2
0130:  GOTO   13C
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
0131:  CLRF   36
0132:  MOVLW  10
0133:  MOVWF  37
0134:  CALL   0A1
0135:  GOTO   13C
....................      default     : lcd_send_byte(1,c);     break; 
0136:  MOVLW  01
0137:  MOVWF  36
0138:  MOVF   32,W
0139:  MOVWF  37
013A:  CALL   0A1
013B:  GOTO   13C
....................    } 
.................... } 
013C:  RETLW  00
....................  
.................... #define calis output_high(pin_d0);     // calýþma anýnda yanacak led tanýmlandý 
.................... #define dur   output_low(pin_d0);      // ledi geri söndürmek için gerekli tanýmlama 
....................  
.................... /////////////////////////////////////////////////////////////////////////////////////////////////// 
.................... ///////////////////////////////////////////////////////////////////////////////////////////////////                           
.................... ////////////  ana program baþlangýcý ////////////////////////////////////////////////////////////// 
.................... /////////////////////////////////////////////////////////////////////////////////////////////////// 
.................... // program timer2 sayacýnýn  T0CKI  ucundan gelen darbeleri  saymasý esasý ile çalýþýr     /////               
.................... // devir sayýsý deiþkeni ve timer0 yani ayný adrese tanýmlý olan sayac deðiþkeni sýfýrlanýr   ///// 
.................... // program 100 milisaniye aralýklarla 1 saniye bekletilir. bu esnada TMR0 gelen palsleri      ///// 
.................... // saymaya devam eder. toplam 1 saniye sonunda tmr0 (sayac) ýn deðeri diskte 16 delik olduðu  ///// 
.................... // ve ayar yani option registerinin tmr0 için deðeri 1/16 ya ayarlandýðu için elde edilen     ///// 
.................... // deðer tam olarak bir saniyedeki devir sayýsýný verir. bu sonuç 60 ile çarpýlarak bir       ///// 
.................... // dakikadaki deðer elde edilmiþ olunur. devrenin ikinci bir görevi de motorun hýz kontro-    ///// 
.................... // lünün yapýlmasýdýr. Bu iþlem için timer2 ve ccp registerleri ilgili ccs c komutlarý ile    ///// 
.................... // kurulur. deðiþim analog kanaldan gelen bilgi ile olacaðý için analog dijital dönüþtürücü   ///// 
.................... // için gerekli ayarlar yapýlýr. RA0 kanalý ilgili hýz kontrol potunun ayar ucuna baðlanýr.   ///// 
.................... // ilgili komutlar ile analog bilgi alýnarak bir deðiþkene ve ardýndan pwm darbe geniþliðine  ///// 
.................... // atanýr. bu sayede motorun hýz kontrolüde yapýlmýþ olunur.  her satýr için gerekli açýklama ///// 
.................... // aþaðýda yapýlmýþtýr                                                                        ///// 
.................... /////////////////////////////////////////////////////////////////////////////////////////////////// 
.................... /////////////////////////////////////////////////////////////////////////////////////////////////// 
....................                                               
.................... void main()                                      
.................... {                                   
*
01B9:  CLRF   04
01BA:  BCF    03.7
01BB:  MOVLW  1F
01BC:  ANDWF  03,F
01BD:  BSF    03.5
01BE:  BSF    1F.0
01BF:  BSF    1F.1
01C0:  BSF    1F.2
01C1:  BCF    1F.3
01C2:  MOVLW  07
01C3:  MOVWF  1C
....................                                                                                                                                   
.................... unsigned int16 devir,sayac;                                                                                                     
.................... unsigned int8 i,PVM; 
....................  
.................... setup_timer_1(T1_external|T1_div_by_1);    
*
01C7:  MOVLW  87
01C8:  MOVWF  10
.................... setup_timer_2( T2_DIV_BY_1,249,1 );        
01C9:  MOVLW  00
01CA:  MOVWF  78
01CB:  IORLW  04
01CC:  MOVWF  12
01CD:  MOVLW  F9
01CE:  BSF    03.5
01CF:  MOVWF  12
.................... setup_ccp1(ccp_pwm);  
*
01C4:  MOVLW  FF
01C5:  BCF    03.5
01C6:  MOVWF  21
*
01D0:  BCF    03.5
01D1:  BCF    21.2
01D2:  MOVF   21,W
01D3:  BSF    03.5
01D4:  MOVWF  07
01D5:  BCF    03.5
01D6:  BCF    07.2
01D7:  MOVLW  0C
01D8:  MOVWF  17
.................... setup_adc_ports( RA0_ANALOG );       
01D9:  BSF    03.5
01DA:  BCF    1F.0
01DB:  BSF    1F.1
01DC:  BSF    1F.2
01DD:  BSF    1F.3
.................... setup_adc(ADC_CLOCK_INTERNAL);      
01DE:  BCF    1F.6
01DF:  BCF    03.5
01E0:  BSF    1F.6
01E1:  BSF    1F.7
01E2:  BSF    03.5
01E3:  BCF    1F.7
01E4:  BCF    03.5
01E5:  BSF    1F.0
.................... set_adc_channel(0);                 
01E6:  MOVLW  00
01E7:  MOVWF  78
01E8:  MOVF   1F,W
01E9:  ANDLW  C7
01EA:  IORWF  78,W
01EB:  MOVWF  1F
.................... delay_ms(20);                     
01EC:  MOVLW  14
01ED:  MOVWF  33
01EE:  CALL   05C
....................  
.................... ana_p: 
.................... set_pwm1_duty(0);          
01EF:  CLRF   15
.................... dur;                                
01F0:  BSF    03.5
01F1:  BCF    08.0
01F2:  BCF    03.5
01F3:  BCF    08.0
.................... lcd_init();                         
01F4:  GOTO   0C6
.................... delay_ms(50);  
01F5:  MOVLW  32
01F6:  MOVWF  33
01F7:  CALL   05C
.................... lcd_gotoxy(1,2);                             
01F8:  MOVLW  01
01F9:  MOVWF  33
01FA:  MOVLW  02
01FB:  MOVWF  34
01FC:  CALL   0F2
.................... printf(lcd_putc,"\fSTARTA BAS" ) ;  
01FD:  CLRF   28
01FE:  MOVF   28,W
01FF:  CALL   00C
0200:  INCF   28,F
0201:  MOVWF  77
0202:  MOVWF  32
0203:  CALL   115
0204:  MOVLW  0B
0205:  SUBWF  28,W
0206:  BTFSS  03.2
0207:  GOTO   1FE
....................   
....................  do 
....................    { 
....................     if(input(pin_d2)==0) break;       
0208:  BSF    03.5
0209:  BSF    08.2
020A:  BCF    03.5
020B:  BTFSS  08.2
020C:  GOTO   211
....................    delay_ms(50);                    
020D:  MOVLW  32
020E:  MOVWF  33
020F:  CALL   05C
....................    } 
....................    while(1);       
....................   
.................... lcd_putc("\fMOTOR CALISIYOR");                   
0210:  GOTO   208
0211:  CLRF   28
0212:  MOVF   28,W
0213:  CALL   01C
0214:  IORLW  00
0215:  BTFSC  03.2
0216:  GOTO   21B
0217:  INCF   28,F
0218:  MOVWF  32
0219:  CALL   115
021A:  GOTO   212
.................... calis;  
021B:  BSF    03.5
021C:  BCF    08.0
021D:  BCF    03.5
021E:  BSF    08.0
.................... lcd_putc("\f");                          
021F:  CLRF   28
0220:  MOVF   28,W
0221:  CALL   031
0222:  IORLW  00
0223:  BTFSC  03.2
0224:  GOTO   229
0225:  INCF   28,F
0226:  MOVWF  32
0227:  CALL   115
0228:  GOTO   220
.................... for(;;)         
.................... {            
.................... pvm=read_adc();  
0229:  BSF    1F.2
022A:  BTFSC  1F.2
022B:  GOTO   22A
022C:  MOVF   1E,W
022D:  MOVWF  27
.................... lcd_gotoxy(1,1);                           
022E:  MOVLW  01
022F:  MOVWF  33
0230:  MOVWF  34
0231:  CALL   0F2
.................... printf(lcd_putc,"MOTOR CALISIYOR");                
0232:  CLRF   28
0233:  MOVF   28,W
0234:  CALL   037
0235:  INCF   28,F
0236:  MOVWF  77
0237:  MOVWF  32
0238:  CALL   115
0239:  MOVLW  0F
023A:  SUBWF  28,W
023B:  BTFSS  03.2
023C:  GOTO   233
.................... DELAY_MS(30); 
023D:  MOVLW  1E
023E:  MOVWF  33
023F:  CALL   05C
.................... set_pwm1_duty(pvm);  
0240:  MOVF   27,W
0241:  MOVWF  15
.................... devir=0;                             
0242:  CLRF   23
0243:  CLRF   22
.................... set_timer1(0);                             
0244:  CLRF   0F
0245:  CLRF   0E
.................... ////////////////////////////////////////////////////////////////////////////////////// 
.................... // bu kýsým 100 ms aralýklarla durdurma butonuna basýlýp basýlmadýðýný kontrol eder // 
.................... // bu arada  timer0 gelen palsleri sayar                                            // 
.................... ////////////////////////////////////////////////////////////////////////////////////// 
....................    for(i=0;i<10;i++) 
0246:  CLRF   26
0247:  MOVF   26,W
0248:  SUBLW  09
0249:  BTFSS  03.0
024A:  GOTO   255
....................    {                                                    
....................    delay_ms(50); 
024B:  MOVLW  32
024C:  MOVWF  33
024D:  CALL   05C
....................       if(input(pin_d3)==0) {goto ana_p;}  // durdurma butonuna basýldý ise ana_p ye git 
024E:  BSF    03.5
024F:  BSF    08.3
0250:  BCF    03.5
0251:  BTFSS  08.3
0252:  GOTO   1EF
....................    } 
0253:  INCF   26,F
0254:  GOTO   247
.................... ///////////////////////////////////////////////////////////////////////////////////// 
.................... sayac=get_timer1();  
0255:  MOVF   0F,W
0256:  MOVWF  7A
0257:  MOVF   0E,W
0258:  MOVWF  77
0259:  MOVF   0F,W
025A:  SUBWF  7A,W
025B:  BTFSS  03.2
025C:  GOTO   255
025D:  MOVF   77,W
025E:  MOVWF  24
025F:  MOVF   7A,W
0260:  MOVWF  25
.................... devir=sayac;                             // devir sayacýna sayýlan deðeri ata 
0261:  MOVF   25,W
0262:  MOVWF  23
0263:  MOVF   24,W
0264:  MOVWF  22
.................... devir=devir*7;                          
0265:  MOVF   23,W
0266:  MOVWF  29
0267:  MOVF   22,W
0268:  MOVWF  28
0269:  CLRF   2B
026A:  MOVLW  07
026B:  MOVWF  2A
026C:  GOTO   13D
026D:  MOVF   79,W
026E:  MOVWF  23
026F:  MOVF   78,W
0270:  MOVWF  22
.................... lcd_gotoxy(2,1);                          // lcd yi temizle imleci ilk sütüna çek 
0271:  MOVLW  02
0272:  MOVWF  33
0273:  MOVLW  01
0274:  MOVWF  34
0275:  CALL   0F2
.................... printf(lcd_putc,"devir=%lud/d",devir); 
0276:  CLRF   28
0277:  MOVF   28,W
0278:  CALL   04B
0279:  INCF   28,F
027A:  MOVWF  77
027B:  MOVWF  32
027C:  CALL   115
027D:  MOVLW  06
027E:  SUBWF  28,W
027F:  BTFSS  03.2
0280:  GOTO   277
0281:  MOVLW  10
0282:  MOVWF  04
0283:  MOVF   23,W
0284:  MOVWF  2A
0285:  MOVF   22,W
0286:  MOVWF  29
0287:  GOTO   154
0288:  MOVLW  64
0289:  MOVWF  32
028A:  CALL   115
028B:  MOVLW  2F
028C:  MOVWF  32
028D:  CALL   115
028E:  MOVLW  64
028F:  MOVWF  32
0290:  CALL   115
.................... }  
0291:  GOTO   229
....................  }   
....................   
....................                                                        
0292:  SLEEP

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT NODEBUG NOPROTECT BROWNOUT NOLVP NOCPD NOWRT
